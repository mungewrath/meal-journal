openapi: 3.0.3
info:
  title: Meal Journal API
  description: An API for a meal journal application where users can log their meals, track symptoms, and receive reminders.
  version: 1.0.0

servers:
  - url: https://localhost:5000/api/v1
    description: Production server

components:
  schemas:
    Food:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        thumbnail:
          type: string
          description: Optional emoji representation of the food
      required:
        - id
        - name

    Meal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        mealType:
          type: string
          description: The type of meal (e.g., Lunch, Snack)
        dateTime:
          type: string
          format: date-time
          description: The date and time of the meal
        foods:
          type: array
          items:
            $ref: "#/components/schemas/Food"
      required:
        - mealType
        - dateTime
        - foods

    Symptoms:
      type: object
      properties:
        symptoms:
          type: array
          items: string
          description: List of symptoms experienced
        dateTime:
          type: string
          format: date-time
          description: The date and time of the symptoms
      required:
        - symptoms
        - dateTime

paths:
  # This may be handled by Cognito
  /users:
    post:
      summary: Create a new user account
      description: Allows users to register an account for the app.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                defaultMealTimes:
                  type: array
                  items:
                    type: string
                  default:
                    - Breakfast
                    - Lunch
                    - Dinner
              required:
                - email
                - password
      responses:
        201:
          description: User created successfully
        400:
          description: Invalid input

  # This may be handled by Cognito
  /users/login:
    post:
      summary: Log in to a user account
      description: Allows users to log into the app.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials

  # This may be handled by Cognito
  /users/{userId}:
    delete:
      summary: Delete a user account
      description: Deletes a user's account and associated data.
      parameters:
        - in: path
          name: userId
          required: true
          description: The unique ID of the user
          schema:
            type: string
      responses:
        204:
          description: User deleted successfully
        404:
          description: User not found

  /preferences:
    get:
      summary: Get user preferences
      description: Retrieves the user's current preferences.
      responses:
        200:
          description: User preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  defaultMealTimes:
                    type: array
                    items:
                      type: string
                  useThumbnails:
                    type: boolean
    post:
      summary: Set user preferences
      description: Allows users to set their preferences for the app.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                defaultMealTimes:
                  type: array
                  items:
                    type: string
                useThumbnails:
                  type: boolean
                  description: Whether to display emoji representations next to food entries and buttons
              required:
                - defaultMealTimes
                - useThumbnails
      responses:
        200:
          description: Preferences set successfully
        400:
          description: Invalid input

  /meals/next:
    get:
      summary: Get the next meal entry form
      description: Retrieves the meal entry form for the user's next presumed meal.
      responses:
        200:
          description: Details of the next meal entry form
          content:
            application/json:
              schema:
                type: object
                properties:
                  mealType:
                    type: string
                    description: The type of the next meal (e.g., Lunch)
                  date:
                    type: string
                    format: date
                    description: The date of the presumed meal
                  time:
                    type: string
                    format: time
                    description: The time of the presumed meal

  /meals:
    post:
      summary: Add or save a meal
      description: Saves a meal entry for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meal"
      responses:
        201:
          description: Meal saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  mealId:
                    type: string
        400:
          description: Invalid input

  /meals/history:
    get:
      summary: View meal history
      description: Allows users to view their meal entries in reverse chronological order.
      parameters:
        - in: query
          name: days
          schema:
            type: integer
            description: Number of days of history to retrieve (default 3)
          required: false
        - in: query
          name: offset
          schema:
            type: integer
            description: Days the query is offset by, for pagination
          required: false
      responses:
        200:
          description: List of past meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Meal"

  /foods:
    post:
      summary: Adds one or more new foods
      description: Allows users to add new foods to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Food"
      responses:
        201:
          description: Food added successfully
        400:
          description: Invalid input
    get:
      summary: Get details for all foods created by the user
      responses:
        200:
          description: Details of the food
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"

  /foods/suggested/{mealType}:
    get:
      summary: Get suggested foods
      description: Retrieves a list of suggested foods for the user's next meals, categorized by meal type
      responses:
        200:
          description: List of suggested foods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"

  /foods/fromPhoto:
    post:
      summary: Identify food from photo
      description: Identifies food items in a photo uploaded by the user.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        200:
          description: Food items identified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
        400:
          description: Error in identifying food

  /symptoms:
    post:
      summary: Add symptoms
      description: Allows users to log symptoms they experienced.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Symptoms"
      responses:
        201:
          description: Symptoms logged successfully
        400:
          description: Invalid input

  /symptoms/history:
    get:
      summary: View symptom history
      description: Allows users to view their symptom entries in reverse chronological order.
      parameters:
        - in: query
          name: days
          schema:
            type: integer
            description: Number of days of history to retrieve (default 3)
          required: false
        - in: query
          name: offset
          schema:
            type: integer
            description: Days the query is offset by, for pagination
          required: false
      responses:
        200:
          description: List of past symptoms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Symptoms"

  /notifications/reminders:
    post:
      summary: Send reminder notification
      description: Sends a reminder notification to the user for meal entry.
      responses:
        200:
          description: Reminder sent
        400:
          description: Error in sending notification
