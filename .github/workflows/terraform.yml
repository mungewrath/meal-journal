# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  prototype-ui-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/prototype-ui/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/prototype-ui/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: prototype-ui/package-lock.json
      # - name: Setup Pages
      #   uses: actions/configure-pages@v5
      #   with:
      #     # Automatically inject basePath in your Next.js configuration file and disable
      #     # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
      #     #
      #     # You may remove this line if you want to manage the configuration yourself.
      #     static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: |
          cd prototype-ui
          ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} run build
      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  backend-build:
    name: "Backend Build"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: "0.5.29"
          enable-cache: true

      - name: Build
        run: |
          cd backend
          bash build-and-deploy.sh -s
        env:
          UV_SYSTEM_PYTHON: 1 # Needed for uv pip

      # - name: Run tests
      #   # For example, using `pytest`
      #   run: uv run pytest tests

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: api_lambda.zip
          path: api_lambda.zip

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    needs:
      - prototype-ui-build
      - backend-build

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Assume Deploy Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::841162687130:role/github-terraform-role
          aws-region: us-west-2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd backend/infrastructure
          terraform init
          terraform workspace select stage

      - name: Download UI Build
        uses: actions/download-artifact@v4
        with:
          name: dist

      #TODO: Build UI, lambda
      # - name: UI Build
      #   run: |
      #     cd prototype-ui
      #     npm install
      #     npm run build
      #   artifacts:
      #     files: prototype-ui/dist/**/*

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    # run: terraform apply -auto-approve -input=false
