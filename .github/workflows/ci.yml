name: "CI Pipeline"

on:
  push:
    branches: ["main"]
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      terraform_apply_stage:
        description: "Apply Terraform changes to Stage"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

jobs:
  web-build:
    name: "Web Build"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./mbd-web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/mbd-web/.next/cache
          # Generate a new cache whenever source files change.
          key: ${{ runner.os }}-mbd-web-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: mbd-web/pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install
      - name: Build Next.js project
        run: pnpm build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mbd-web-build
          path: ./mbd-web/out

  backend-build:
    name: "Backend Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: "0.5.29"
          enable-cache: true

      - name: Build
        run: |
          cd backend
          bash build-and-deploy.sh -s
        env:
          UV_SYSTEM_PYTHON: 1 # Needed for uv pip

      # - name: Run tests
      #   # For example, using `pytest`
      #   run: uv run pytest tests

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: api_lambda.zip
          path: backend/api_lambda.zip

  deploy-stage:
    name: "Deploy to Stage"
    needs:
      - web-build
      - backend-build
    uses: ./.github/workflows/terraform.yml
    with:
      terraform_workspace: stage
      terraform_apply: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && true || (inputs.terraform_apply_stage || false) }}
    #   secrets: inherit

  deploy-prod-gate:
    name: "Deploy to Prod Approval"
    runs-on: ubuntu-latest
    needs:
      - deploy-stage
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: # Gates with manual approval
      name: production
    steps:
      - name: Wait for manual approval
        run: echo "Proceeding with deploy..."

  deploy-prod:
    name: "Deploy to Prod"
    needs:
      - deploy-prod-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    uses: ./.github/workflows/terraform.yml
    with:
      terraform_workspace: prod
      terraform_apply: true
