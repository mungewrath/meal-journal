# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: "Terraform"

on:
  workflow_call:
    inputs:
      terraform_workspace:
        required: true
        type: string
        default: "stage"
      terraform_apply:
        required: false
        type: boolean
        default: false
      web_build_environment:
        required: true
        type: string
        default: "stage"
        description: "Environment to fetch UI artifacts from. Can be 'stage' or 'prod'."

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: "Terraform ${{ inputs.terraform_workspace }}"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Assume Deploy Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::841162687130:role/github-terraform-role
          aws-region: us-west-2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd backend/infrastructure
          terraform init
          terraform workspace select ${{ inputs.terraform_workspace }}

      - name: Download Web Build
        uses: actions/download-artifact@v4
        with:
          name: mbd-web-build-${{ inputs.web_build_environment }}
          path: mbd-web/out

      - name: Download Lambda Build
        uses: actions/download-artifact@v4
        with:
          name: api_lambda.zip
          path: backend

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd backend/infrastructure
          echo "Checking Terraform formatting..."
          terraform fmt -check
          echo "Generate Terraform execution plan..."
          terraform plan -input=false

      # Build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: inputs.terraform_apply
        run: |
          cd backend/infrastructure
          terraform apply -auto-approve -input=false
